[{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Freer\">Freer</a> f a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Pure\">Pure</a> :: a -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f a</li><li><a href=\"#v:Impure\">Impure</a> :: f a -&gt; (a -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f b) -&gt; <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> f b</li></ul>","name":"Freer Impure Pure","module":"Effect.Internal","link":"Effect-Internal.html#t:Freer"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Fixpoint\">Fixpoint</a> (f :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (g :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Fixpoint\">Fixpoint</a> :: {..} -&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> f g a</li></ul>","name":"Fixpoint unFixpoint Fixpoint","module":"Effect.Internal","link":"Effect-Internal.html#t:Fixpoint"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretOneLayer\">InterpretOneLayer</a> f g m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretOneLayer\">interpretOneLayer</a> :: (<span class=\"keyword\">forall</span> b. <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f b -&gt; m b) -&gt; f (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f) a -&gt; m a</li></ul>","name":"InterpretOneLayer interpretOneLayer","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretOneLayer"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretOneLayerState\">InterpretOneLayerState</a> x f g m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretOneLayerState\">interpretOneLayerState</a> :: (<span class=\"keyword\">forall</span> b. x -&gt; <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f b -&gt; m (b, x)) -&gt; x -&gt; f (<a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> g f) a -&gt; m (a, x)</li></ul>","name":"InterpretOneLayerState interpretOneLayerState","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretOneLayerState"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Effect\">Effect</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>","name":"Effect","module":"Effect.Internal","link":"Effect-Internal.html#t:Effect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:JoinedEffects\">JoinedEffects</a> (ops :: [<a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>]) :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:JoinedEffectsHere\">JoinedEffectsHere</a> :: op m a -&gt; <a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> (op ': ops) m a</li><li><a href=\"#v:JoinedEffectsThere\">JoinedEffectsThere</a> :: <a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> ops m a -&gt; <a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> (op ': ops) m a</li></ul>","name":"JoinedEffects JoinedEffectsThere JoinedEffectsHere","module":"Effect.Internal","link":"Effect-Internal.html#t:JoinedEffects"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:EffectInject\">EffectInject</a> (op :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>) (ops :: [<a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>]) | ops -&gt; op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:effectInject\">effectInject</a> :: op m a -&gt; <a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> ops m a</li></ul>","name":"EffectInject effectInject","module":"Effect.Internal","link":"Effect-Internal.html#t:EffectInject"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AST\">AST</a> ops = <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> (<a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> ops)","name":"AST","module":"Effect.Internal","link":"Effect-Internal.html#t:AST"},{"display_html":"<a href=\"#v:astInject\">astInject</a> :: <a href=\"Effect-Internal.html#t:EffectInject\" title=\"Effect.Internal\">EffectInject</a> op ops =&gt; op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops a","name":"astInject","module":"Effect.Internal","link":"Effect-Internal.html#v:astInject"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffect\">InterpretEffect</a> m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffect\">interpretEffect</a> :: (<span class=\"keyword\">forall</span> b. <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops b -&gt; m b) -&gt; op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; m a</li></ul>","name":"InterpretEffect interpretEffect","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ConstraintList\">ConstraintList</a> :: (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Constraint\" title=\"Data.Kind\">Constraint</a>) -&gt; [a] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:ConstraintNil\">ConstraintNil</a> :: <a href=\"Effect-Internal.html#t:ConstraintList\" title=\"Effect.Internal\">ConstraintList</a> c '[]</li><li><a href=\"#v:ConstraintCons\">ConstraintCons</a> :: c ty =&gt; <a href=\"Effect-Internal.html#t:ConstraintList\" title=\"Effect.Internal\">ConstraintList</a> c tys -&gt; <a href=\"Effect-Internal.html#t:ConstraintList\" title=\"Effect.Internal\">ConstraintList</a> c (ty ': tys)</li></ul>","name":"ConstraintList ConstraintCons ConstraintNil","module":"Effect.Internal","link":"Effect-Internal.html#t:ConstraintList"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffects\">InterpretEffects</a> m ops <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffects\">interpretEffects</a> :: <a href=\"Effect-Internal.html#t:ConstraintList\" title=\"Effect.Internal\">ConstraintList</a> (<a href=\"Effect-Internal.html#t:InterpretEffect\" title=\"Effect.Internal\">InterpretEffect</a> m) ops</li></ul>","name":"InterpretEffects interpretEffects","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretEffects"},{"display_html":"<a href=\"#v:interpretAST\">interpretAST</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect-Internal.html#t:InterpretEffects\" title=\"Effect.Internal\">InterpretEffects</a> m ops) =&gt; <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops a -&gt; m a","name":"interpretAST","module":"Effect.Internal","link":"Effect-Internal.html#v:interpretAST"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectStateful\">InterpretEffectStateful</a> (t :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectStateful\">interpretEffectStateful</a> :: (<span class=\"keyword\">forall</span> b y. t y -&gt; <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops b -&gt; m (b, t y)) -&gt; t x -&gt; op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; m (a, t x)</li></ul>","name":"InterpretEffectStateful interpretEffectStateful","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretEffectStateful"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectsStateful\">InterpretEffectsStateful</a> t m ops <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectsStateful\">interpretEffectsStateful</a> :: <a href=\"Effect-Internal.html#t:ConstraintList\" title=\"Effect.Internal\">ConstraintList</a> (<a href=\"Effect-Internal.html#t:InterpretEffectStateful\" title=\"Effect.Internal\">InterpretEffectStateful</a> t m) ops</li></ul>","name":"InterpretEffectsStateful interpretEffectsStateful","module":"Effect.Internal","link":"Effect-Internal.html#t:InterpretEffectsStateful"},{"display_html":"<a href=\"#v:interpretASTStateful\">interpretASTStateful</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect-Internal.html#t:InterpretEffectsStateful\" title=\"Effect.Internal\">InterpretEffectsStateful</a> t m ops) =&gt; t x -&gt; <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops a -&gt; m (a, t x)","name":"interpretASTStateful","module":"Effect.Internal","link":"Effect-Internal.html#v:interpretASTStateful"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Effect\">Effect</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>","name":"Effect","module":"Effect","link":"Effect.html#t:Effect"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:EffectInject\">EffectInject</a> (op :: <a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>) (ops :: [<a href=\"Effect.html#t:Effect\" title=\"Effect\">Effect</a>]) | ops -&gt; op","name":"EffectInject","module":"Effect","link":"Effect.html#t:EffectInject"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AST\">AST</a> ops = <a href=\"Effect-Internal.html#t:Fixpoint\" title=\"Effect.Internal\">Fixpoint</a> <a href=\"Effect-Internal.html#t:Freer\" title=\"Effect.Internal\">Freer</a> (<a href=\"Effect-Internal.html#t:JoinedEffects\" title=\"Effect.Internal\">JoinedEffects</a> ops)","name":"AST","module":"Effect","link":"Effect.html#t:AST"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffect\">InterpretEffect</a> m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffect\">interpretEffect</a> :: (<span class=\"keyword\">forall</span> b. <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m b) -&gt; op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; m a</li></ul>","name":"InterpretEffect interpretEffect","module":"Effect","link":"Effect.html#t:InterpretEffect"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffects\">InterpretEffects</a> m ops","name":"InterpretEffects","module":"Effect","link":"Effect.html#t:InterpretEffects"},{"display_html":"<a href=\"#v:interpretAST\">interpretAST</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect.html#t:InterpretEffects\" title=\"Effect\">InterpretEffects</a> m ops) =&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops a -&gt; m a","name":"interpretAST","module":"Effect","link":"Effect.html#v:interpretAST"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectStateful\">InterpretEffectStateful</a> (t :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectStateful\">interpretEffectStateful</a> :: (<span class=\"keyword\">forall</span> b y. t y -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops b -&gt; m (b, t y)) -&gt; t x -&gt; op (<a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops) a -&gt; m (a, t x)</li></ul>","name":"InterpretEffectStateful interpretEffectStateful","module":"Effect","link":"Effect.html#t:InterpretEffectStateful"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectsStateful\">InterpretEffectsStateful</a> t m ops","name":"InterpretEffectsStateful","module":"Effect","link":"Effect.html#t:InterpretEffectsStateful"},{"display_html":"<a href=\"#v:interpretASTStateful\">interpretASTStateful</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m, <a href=\"Effect.html#t:InterpretEffectsStateful\" title=\"Effect\">InterpretEffectsStateful</a> t m ops) =&gt; t x -&gt; <a href=\"Effect.html#t:AST\" title=\"Effect\">AST</a> ops a -&gt; m (a, t x)","name":"interpretASTStateful","module":"Effect","link":"Effect.html#v:interpretASTStateful"},{"display_html":"<a href=\"#v:defineEffectType\">defineEffectType</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"defineEffectType","module":"Effect.TH","link":"Effect-TH.html#v:defineEffectType"},{"display_html":"<a href=\"#v:makeEffect\">makeEffect</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeEffect","module":"Effect.TH","link":"Effect-TH.html#v:makeEffect"},{"display_html":"<a href=\"#v:makeReification\">makeReification</a> :: ([<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Type\" title=\"Language.Haskell.TH.Syntax\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeReification","module":"Effect.TH","link":"Effect-TH.html#v:makeReification"},{"display_html":"<a href=\"#v:makeInterpretation\">makeInterpretation</a> :: ([<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Type\" title=\"Language.Haskell.TH.Syntax\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeInterpretation","module":"Effect.TH","link":"Effect-TH.html#v:makeInterpretation"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadStateEffect\">MonadStateEffect</a> (s :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Get\">Get</a> :: <span class=\"keyword\">forall</span> (s :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"Effect-State.html#t:MonadStateEffect\" title=\"Effect.State\">MonadStateEffect</a> s m s</li><li><a href=\"#v:Put\">Put</a> :: <span class=\"keyword\">forall</span> (s :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). s -&gt; <a href=\"Effect-State.html#t:MonadStateEffect\" title=\"Effect.State\">MonadStateEffect</a> s m ()</li><li><a href=\"#v:State\">State</a> :: <span class=\"keyword\">forall</span> (s :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (s -&gt; (a, s)) -&gt; <a href=\"Effect-State.html#t:MonadStateEffect\" title=\"Effect.State\">MonadStateEffect</a> s m a</li></ul>","name":"MonadStateEffect State Put Get","module":"Effect.State","link":"Effect-State.html#t:MonadStateEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadIOEffect\">MonadIOEffect</a> :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:LiftIO\">LiftIO</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (<a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> a) -&gt; <a href=\"Effect-IO.html#t:MonadIOEffect\" title=\"Effect.IO\">MonadIOEffect</a> m a</li></ul>","name":"MonadIOEffect LiftIO","module":"Effect.IO","link":"Effect-IO.html#t:MonadIOEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadFailEffect\">MonadFailEffect</a> :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Fail\">Fail</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Effect-Fail.html#t:MonadFailEffect\" title=\"Effect.Fail\">MonadFailEffect</a> m a</li></ul>","name":"MonadFailEffect Fail","module":"Effect.Fail","link":"Effect-Fail.html#t:MonadFailEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadErrorEffect\">MonadErrorEffect</a> (e :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:ThrowError\">ThrowError</a> :: <span class=\"keyword\">forall</span> (e :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). e -&gt; <a href=\"Effect-Error.html#t:MonadErrorEffect\" title=\"Effect.Error\">MonadErrorEffect</a> e m a</li><li><a href=\"#v:CatchError\">CatchError</a> :: <span class=\"keyword\">forall</span> (e :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m a) -&gt; (e -&gt; m a) -&gt; <a href=\"Effect-Error.html#t:MonadErrorEffect\" title=\"Effect.Error\">MonadErrorEffect</a> e m a</li></ul>","name":"MonadErrorEffect CatchError ThrowError","module":"Effect.Error","link":"Effect-Error.html#t:MonadErrorEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Foo\">Foo</a> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Foo\">Foo</a> :: ((m a -&gt; b) -&gt; m c) -&gt; <a href=\"Effect-THTests.html#t:Foo\" title=\"Effect.THTests\">Foo</a> m c</li></ul>","name":"Foo Foo","module":"Effect.THTests","link":"Effect-THTests.html#t:Foo"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadFoo\">MonadFoo</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:foo\">foo</a> :: ((m a -&gt; b) -&gt; m c) -&gt; m c</li></ul>","name":"MonadFoo foo","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadFoo"},{"display_html":"<a href=\"#v:interpretFoo\">interpretFoo</a> :: <a href=\"Effect-THTests.html#t:MonadFoo\" title=\"Effect.THTests\">MonadFoo</a> m =&gt; (<span class=\"keyword\">forall</span> b. <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops b -&gt; m b) -&gt; <a href=\"Effect-THTests.html#t:Foo\" title=\"Effect.THTests\">Foo</a> (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; m a","name":"interpretFoo","module":"Effect.THTests","link":"Effect-THTests.html#v:interpretFoo"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Bar\">Bar</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Bar\">Bar</a> :: (((a -&gt; m b) -&gt; c) -&gt; d) -&gt; <a href=\"Effect-THTests.html#t:Bar\" title=\"Effect.THTests\">Bar</a> m c</li></ul>","name":"Bar Bar","module":"Effect.THTests","link":"Effect-THTests.html#t:Bar"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadBar\">MonadBar</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:bar\">bar</a> :: (((a -&gt; m b) -&gt; c) -&gt; d) -&gt; m c</li></ul>","name":"MonadBar bar","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadBar"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Baz\">Baz</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Baz\">Baz</a> :: ((m a -&gt; b) -&gt; m c) -&gt; <a href=\"Effect-THTests.html#t:Baz\" title=\"Effect.THTests\">Baz</a> m c</li></ul>","name":"Baz Baz","module":"Effect.THTests","link":"Effect-THTests.html#t:Baz"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadBaz\">MonadBaz</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:baz\">baz</a> :: ((m a -&gt; b) -&gt; m c) -&gt; m c</li></ul>","name":"MonadBaz baz","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadBaz"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Quux\">Quux</a> m a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Quux\">Quux</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> (<a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> x, (m a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>)) [b -&gt; m a] -&gt; <a href=\"Effect-THTests.html#t:Quux\" title=\"Effect.THTests\">Quux</a> m a</li></ul>","name":"Quux Quux","module":"Effect.THTests","link":"Effect-THTests.html#t:Quux"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadQuux\">MonadQuux</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:quux\">quux</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> (<a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> x, (m a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>)) [b -&gt; m a] -&gt; m a</li></ul>","name":"MonadQuux quux","module":"Effect.THTests","link":"Effect-THTests.html#t:MonadQuux"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadWriterEffect\">MonadWriterEffect</a> (w :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Writer\">Writer</a> :: <span class=\"keyword\">forall</span> (w :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (a, w) -&gt; <a href=\"Effect-Writer.html#t:MonadWriterEffect\" title=\"Effect.Writer\">MonadWriterEffect</a> w m a</li><li><a href=\"#v:Tell\">Tell</a> :: <span class=\"keyword\">forall</span> (w :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). w -&gt; <a href=\"Effect-Writer.html#t:MonadWriterEffect\" title=\"Effect.Writer\">MonadWriterEffect</a> w m ()</li><li><a href=\"#v:Listen\">Listen</a> :: <span class=\"keyword\">forall</span> (w :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m a) -&gt; <a href=\"Effect-Writer.html#t:MonadWriterEffect\" title=\"Effect.Writer\">MonadWriterEffect</a> w m (a, w)</li><li><a href=\"#v:Pass\">Pass</a> :: <span class=\"keyword\">forall</span> (w :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m (a, w -&gt; w)) -&gt; <a href=\"Effect-Writer.html#t:MonadWriterEffect\" title=\"Effect.Writer\">MonadWriterEffect</a> w m a</li></ul>","name":"MonadWriterEffect Tell Listen Writer Pass","module":"Effect.Writer","link":"Effect-Writer.html#t:MonadWriterEffect"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Payment\">Payment</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)","name":"Payment","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:Payment"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Policy\">Policy</a> = <a href=\"Examples-Account-AbstractDomain.html#t:Payment\" title=\"Examples.Account.AbstractDomain\">Payment</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"Policy","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:Policy"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Account\">Account</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Set.html#t:Set\" title=\"Data.Set\">Set</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>)","name":"Account","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:Account"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Register\">Register</a> = <a href=\"#v:Register\">Register</a> {<ul class=\"subs\"><li><a href=\"#v:policies\">policies</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a></li><li><a href=\"#v:accounts\">accounts</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Account\" title=\"Examples.Account.AbstractDomain\">Account</a></li></ul>}","name":"Register accounts policies Register","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:Register"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadAccounts\">MonadAccounts</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:addUser\">addUser</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m ()</li><li><a href=\"#v:addPolicy\">addPolicy</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a> -&gt; m ()</li><li><a href=\"#v:allPolicies\">allPolicies</a> :: m [<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>]</li><li><a href=\"#v:subscribeToPolicy\">subscribeToPolicy</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m ()</li><li><a href=\"#v:unsubscribeToPolicy\">unsubscribeToPolicy</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m ()</li><li><a href=\"#v:simulate\">simulate</a> :: m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a)</li><li><a href=\"#v:issuePayment\">issuePayment</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:Payment\" title=\"Examples.Account.AbstractDomain\">Payment</a> -&gt; m ()</li><li><a href=\"#v:getUserBalance\">getUserBalance</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li></ul>","name":"MonadAccounts getUserBalance issuePayment simulate unsubscribeToPolicy subscribeToPolicy allPolicies addPolicy addUser","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:MonadAccounts"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadAccountsEffect\">MonadAccountsEffect</a> :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:AddUser\">AddUser</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m ()</li><li><a href=\"#v:AddPolicy\">AddPolicy</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m ()</li><li><a href=\"#v:AllPolicies\">AllPolicies</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m [<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>]</li><li><a href=\"#v:SubscribeToPolicy\">SubscribeToPolicy</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m ()</li><li><a href=\"#v:UnsubscribeToPolicy\">UnsubscribeToPolicy</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m ()</li><li><a href=\"#v:Simulate\">Simulate</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m a) -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a)</li><li><a href=\"#v:IssuePayment\">IssuePayment</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"Examples-Account-AbstractDomain.html#t:Payment\" title=\"Examples.Account.AbstractDomain\">Payment</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m ()</li><li><a href=\"#v:GetUserBalance\">GetUserBalance</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a> m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li></ul>","name":"MonadAccountsEffect GetUserBalance IssuePayment Simulate UnsubscribeToPolicy SubscribeToPolicy AllPolicies AddPolicy AddUser","module":"Examples.Account.AbstractDomain","link":"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AccountsError\">AccountsError</a><ul class=\"subs\"><li>= <a href=\"#v:NoSuchAccount\">NoSuchAccount</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li><li>| <a href=\"#v:AlreadyExistingAccount\">AlreadyExistingAccount</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li><li>| <a href=\"#v:NoSuchPolicy\">NoSuchPolicy</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li><li>| <a href=\"#v:AlreadyExistingPolicy\">AlreadyExistingPolicy</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li><li>| <a href=\"#v:PolicyError\">PolicyError</a></li></ul>","name":"AccountsError PolicyError AlreadyExistingPolicy NoSuchPolicy AlreadyExistingAccount NoSuchAccount","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#t:AccountsError"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AccountsT\">AccountsT</a> m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> <a href=\"Examples-Account-AbstractDomain.html#t:Register\" title=\"Examples.Account.AbstractDomain\">Register</a> m)","name":"AccountsT","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#t:AccountsT"},{"display_html":"<a href=\"#v:ensureExistingUser\">ensureExistingUser</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m <a href=\"Examples-Account-AbstractDomain.html#t:Account\" title=\"Examples.Account.AbstractDomain\">Account</a>","name":"ensureExistingUser","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:ensureExistingUser"},{"display_html":"<a href=\"#v:ensureNonExistingUser\">ensureNonExistingUser</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m ()","name":"ensureNonExistingUser","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:ensureNonExistingUser"},{"display_html":"<a href=\"#v:modifyAccounts\">modifyAccounts</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Account\" title=\"Examples.Account.AbstractDomain\">Account</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Account\" title=\"Examples.Account.AbstractDomain\">Account</a>) -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m ()","name":"modifyAccounts","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:modifyAccounts"},{"display_html":"<a href=\"#v:ensureExistingPolicy\">ensureExistingPolicy</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>","name":"ensureExistingPolicy","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:ensureExistingPolicy"},{"display_html":"<a href=\"#v:ensureNonExistingPolicy\">ensureNonExistingPolicy</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m ()","name":"ensureNonExistingPolicy","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:ensureNonExistingPolicy"},{"display_html":"<a href=\"#v:modifyPolicies\">modifyPolicies</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>) -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m ()","name":"modifyPolicies","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:modifyPolicies"},{"display_html":"<a href=\"#v:runAccountsT\">runAccountsT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"Examples-Account-AbstractDomain.html#t:Register\" title=\"Examples.Account.AbstractDomain\">Register</a> -&gt; <a href=\"Examples-Account-SimpleDomain.html#t:AccountsT\" title=\"Examples.Account.SimpleDomain\">AccountsT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Examples-Account-AbstractDomain.html#t:Account\" title=\"Examples.Account.AbstractDomain\">Account</a>)","name":"runAccountsT","module":"Examples.Account.SimpleDomain","link":"Examples-Account-SimpleDomain.html#v:runAccountsT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:NextBind\">NextBind</a> t x <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:DoNothing\">DoNothing</a> :: x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Fail\">Fail</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t ()</li><li><a href=\"#v:Now\">Now</a> :: t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Branch\">Branch</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li><li><a href=\"#v:Next\">Next</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t y -&gt; (y -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x</li></ul>","name":"NextBind Now DoNothing Branch Next Fail","module":"Logic.NextBind","link":"Logic-NextBind.html#t:NextBind"},{"display_html":"<a href=\"#v:andLater\">andLater</a> :: t a -&gt; (a -&gt; t b) -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t b","name":"andLater","module":"Logic.NextBind","link":"Logic-NextBind.html#v:andLater"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: t a -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t a","name":"somewhere","module":"Logic.NextBind","link":"Logic-NextBind.html#v:somewhere"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: t a -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t a","name":"everywhere","module":"Logic.NextBind","link":"Logic-NextBind.html#v:everywhere"},{"display_html":"<a href=\"#v:finished\">finished</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"finished","module":"Logic.NextBind","link":"Logic-NextBind.html#v:finished"},{"display_html":"<a href=\"#v:immediate\">immediate</a> :: <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; [x]","name":"immediate","module":"Logic.NextBind","link":"Logic-NextBind.html#v:immediate"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Interpretation\">Interpretation</a> t m ops a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Direct\">Direct</a> :: (<span class=\"keyword\">forall</span> x. t x -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> (a, x))) -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li><li><a href=\"#v:Nested\">Nested</a> :: <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops b -&gt; (<span class=\"keyword\">forall</span> x. <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x -&gt; <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; (<span class=\"keyword\">forall</span> x. m (b, <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x) -&gt; m (a, <a href=\"Logic-NextBind.html#t:NextBind\" title=\"Logic.NextBind\">NextBind</a> t x)) -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li></ul>","name":"Interpretation Nested Direct","module":"Logic.NextBind","link":"Logic-NextBind.html#t:Interpretation"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretNextBind\">InterpretNextBind</a> t m op <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretNextBind\">interpretNextBind</a> :: op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; <a href=\"Logic-NextBind.html#t:Interpretation\" title=\"Logic.NextBind\">Interpretation</a> t m ops a</li></ul>","name":"InterpretNextBind interpretNextBind","module":"Logic.NextBind","link":"Logic-NextBind.html#t:InterpretNextBind"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretMod\">InterpretMod</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (op :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretMod\">interpretMod</a> :: op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> dummy) a -&gt; <a href=\"Logic-SingleStep.html#t:ModInterp\" title=\"Logic.SingleStep\">ModInterp</a> mod m a</li></ul>","name":"InterpretMod interpretMod","module":"Logic.SingleStep","link":"Logic-SingleStep.html#t:InterpretMod"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ModInterp\">ModInterp</a> mod m a<ul class=\"subs\"><li>= <a href=\"#v:Invisible\">Invisible</a></li><li>| <a href=\"#v:Visible\">Visible</a> (mod -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a))</li></ul>","name":"ModInterp Invisible Visible","module":"Logic.SingleStep","link":"Logic-SingleStep.html#t:ModInterp"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Ltl\">Ltl</a> a<ul class=\"subs\"><li>= <a href=\"#v:LtlTruth\">LtlTruth</a></li><li>| <a href=\"#v:LtlFalsity\">LtlFalsity</a></li><li>| <a href=\"#v:LtlAtom\">LtlAtom</a> a</li><li>| <a href=\"#v:LtlOr\">LtlOr</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlAnd\">LtlAnd</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlNext\">LtlNext</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlUntil\">LtlUntil</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlRelease\">LtlRelease</a> (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a) (<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a)</li></ul>","name":"Ltl LtlTruth LtlFalsity LtlAtom LtlOr LtlAnd LtlNext LtlUntil LtlRelease","module":"Logic.Ltl","link":"Logic-Ltl.html#t:Ltl"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: a -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a","name":"somewhere","module":"Logic.Ltl","link":"Logic-Ltl.html#v:somewhere"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: a -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a","name":"everywhere","module":"Logic.Ltl","link":"Logic-Ltl.html#v:everywhere"},{"display_html":"<a href=\"#v:there\">there</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a -&gt; <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a","name":"there","module":"Logic.Ltl","link":"Logic-Ltl.html#v:there"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:LtlAST\">LtlAST</a> mod ops = <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> (LtlEffect mod ': ops)","name":"LtlAST","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlAST"},{"display_html":"<a href=\"#v:modifyLtl\">modifyLtl</a> :: <a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a","name":"modifyLtl","module":"Logic.Ltl","link":"Logic-Ltl.html#v:modifyLtl"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretLtlHigherOrder\">InterpretLtlHigherOrder</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (op :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretLtlHigherOrder\">interpretLtlHigherOrder</a> :: op (<a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops) a -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li></ul>","name":"InterpretLtlHigherOrder interpretLtlHigherOrder","module":"Logic.Ltl","link":"Logic-Ltl.html#t:InterpretLtlHigherOrder"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:LtlInterpHigherOrder\">LtlInterpHigherOrder</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (ops :: [<a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>]) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Direct\">Direct</a> :: <a href=\"Logic-SingleStep.html#t:ModInterp\" title=\"Logic.SingleStep\">ModInterp</a> mod m a -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li><li><a href=\"#v:Nested\">Nested</a> :: ((<span class=\"keyword\">forall</span> b. [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; <a href=\"Effect-Internal.html#t:AST\" title=\"Effect.Internal\">AST</a> ops b -&gt; m (b, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod])) -&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> (a, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod]))) -&gt; <a href=\"Logic-Ltl.html#t:LtlInterpHigherOrder\" title=\"Logic.Ltl\">LtlInterpHigherOrder</a> mod m ops a</li></ul>","name":"LtlInterpHigherOrder Direct Nested","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlInterpHigherOrder"},{"display_html":"<a href=\"#v:nowLaterList\">nowLaterList</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> a =&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a] -&gt; [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> a])]","name":"nowLaterList","module":"Logic.Ltl","link":"Logic-Ltl.html#v:nowLaterList"},{"display_html":"<a href=\"#v:nowLaterSplit\">nowLaterSplit</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> x, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:MonadPlus\" title=\"Control.Monad\">MonadPlus</a> m) =&gt; m a -&gt; (x -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a)) -&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> x] -&gt; m (a, [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> x])","name":"nowLaterSplit","module":"Logic.Ltl","link":"Logic-Ltl.html#v:nowLaterSplit"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:LtlInstanceKind\">LtlInstanceKind</a><ul class=\"subs\"><li>= <a href=\"#v:InterpretModTag\">InterpretModTag</a></li><li>| <a href=\"#v:InterpretLtlHigherOrderTag\">InterpretLtlHigherOrderTag</a></li><li>| <a href=\"#v:InterpretEffectStatefulTag\">InterpretEffectStatefulTag</a></li></ul>","name":"LtlInstanceKind InterpretModTag InterpretLtlHigherOrderTag InterpretEffectStatefulTag","module":"Logic.Ltl","link":"Logic-Ltl.html#t:LtlInstanceKind"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:InterpretEffectsLtl\">InterpretEffectsLtl</a> (mod :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (tags :: [<a href=\"Logic-Ltl.html#t:LtlInstanceKind\" title=\"Logic.Ltl\">LtlInstanceKind</a>]) (ops :: [<a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a>]) <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpretEffectsLtl\">interpretEffectsLtl</a> :: InterpretEffectsLtlConstraintList mod m tags ops</li></ul>","name":"InterpretEffectsLtl interpretEffectsLtl","module":"Logic.Ltl","link":"Logic-Ltl.html#t:InterpretEffectsLtl"},{"display_html":"<a href=\"#v:interpretLtlAST\">interpretLtlAST</a> :: <span class=\"keyword\">forall</span> tags mod m ops a. (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> mod, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:MonadPlus\" title=\"Control.Monad\">MonadPlus</a> m, <a href=\"Logic-Ltl.html#t:InterpretEffectsLtl\" title=\"Logic.Ltl\">InterpretEffectsLtl</a> mod m tags ops) =&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; m a","name":"interpretLtlAST","module":"Logic.Ltl","link":"Logic-Ltl.html#v:interpretLtlAST"},{"display_html":"<a href=\"#v:interpretLtlASTWithInitialFormulas\">interpretLtlASTWithInitialFormulas</a> :: <span class=\"keyword\">forall</span> tags mod m ops a. (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Semigroup\" title=\"Prelude\">Semigroup</a> mod, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:MonadPlus\" title=\"Control.Monad\">MonadPlus</a> m, <a href=\"Logic-Ltl.html#t:InterpretEffectsLtl\" title=\"Logic.Ltl\">InterpretEffectsLtl</a> mod m tags ops) =&gt; [<a href=\"Logic-Ltl.html#t:Ltl\" title=\"Logic.Ltl\">Ltl</a> mod] -&gt; <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> mod ops a -&gt; m a","name":"interpretLtlASTWithInitialFormulas","module":"Logic.Ltl","link":"Logic-Ltl.html#v:interpretLtlASTWithInitialFormulas"},{"display_html":"<a href=\"#v:makeLtl\">makeLtl</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> [<a href=\"https://hackage.haskell.org/package/-/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>]","name":"makeLtl","module":"Logic.Ltl.TH","link":"Logic-Ltl-TH.html#v:makeLtl"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadKeyValue\">MonadKeyValue</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:storeValue\">storeValue</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m ()</li><li><a href=\"#v:getValue\">getValue</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li><li><a href=\"#v:deleteValue\">deleteValue</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m ()</li></ul>","name":"MonadKeyValue deleteValue getValue storeValue","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:MonadKeyValue"},{"display_html":"<a href=\"#v:swapTrace\">swapTrace</a> :: <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValue\" title=\"Examples.Ltl.Simple\">MonadKeyValue</a> m =&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)","name":"swapTrace","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:swapTrace"},{"display_html":"<a href=\"#v:deleteTrace\">deleteTrace</a> :: <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValue\" title=\"Examples.Ltl.Simple\">MonadKeyValue</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"deleteTrace","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:deleteTrace"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:KeyValueError\">KeyValueError</a> = <a href=\"#v:NoSuchKey\">NoSuchKey</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"KeyValueError NoSuchKey","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:KeyValueError"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:KeyValueT\">KeyValueT</a> m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) m)","name":"KeyValueT","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:KeyValueT"},{"display_html":"<a href=\"#v:runKeyValueT\">runKeyValueT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueT\" title=\"Examples.Ltl.Simple\">KeyValueT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)","name":"runKeyValueT","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:runKeyValueT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadKeyValueEffect\">MonadKeyValueEffect</a> :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:StoreValue\">StoreValue</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValueEffect\" title=\"Examples.Ltl.Simple\">MonadKeyValueEffect</a> m ()</li><li><a href=\"#v:GetValue\">GetValue</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValueEffect\" title=\"Examples.Ltl.Simple\">MonadKeyValueEffect</a> m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li><li><a href=\"#v:DeleteValue\">DeleteValue</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Ltl-Simple.html#t:MonadKeyValueEffect\" title=\"Examples.Ltl.Simple\">MonadKeyValueEffect</a> m ()</li></ul>","name":"MonadKeyValueEffect GetValue DeleteValue StoreValue","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:MonadKeyValueEffect"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:KeyValueMod\">KeyValueMod</a> = <a href=\"#v:KeyValueMod\">KeyValueMod</a> {<ul class=\"subs\"><li><a href=\"#v:noOverwrite\">noOverwrite</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li><a href=\"#v:renameKey\">renameKey</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li></ul>}","name":"KeyValueMod renameKey noOverwrite KeyValueMod","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#t:KeyValueMod"},{"display_html":"<a href=\"#v:renameKeys\">renameKeys</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>) -&gt; <a href=\"Examples-Ltl-Simple.html#t:KeyValueMod\" title=\"Examples.Ltl.Simple\">KeyValueMod</a>","name":"renameKeys","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:renameKeys"},{"display_html":"<a href=\"#v:noStoreOverride\">noStoreOverride</a> :: <a href=\"Examples-Ltl-Simple.html#t:KeyValueMod\" title=\"Examples.Ltl.Simple\">KeyValueMod</a>","name":"noStoreOverride","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:noStoreOverride"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueMod\" title=\"Examples.Ltl.Simple\">KeyValueMod</a> '[<a href=\"Examples-Ltl-Simple.html#t:MonadKeyValueEffect\" title=\"Examples.Ltl.Simple\">MonadKeyValueEffect</a>, <a href=\"Effect-Error.html#t:MonadErrorEffect\" title=\"Effect.Error\">MonadErrorEffect</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a>] a -&gt; [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"interpretAndRun","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:interpretAndRun"},{"display_html":"<a href=\"#v:exampleSomewhereSwap\">exampleSomewhereSwap</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleSomewhereSwap","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleSomewhereSwap"},{"display_html":"<a href=\"#v:exampleSomewhereDelete\">exampleSomewhereDelete</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleSomewhereDelete","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleSomewhereDelete"},{"display_html":"<a href=\"#v:exampleEverywhereSwap\">exampleEverywhereSwap</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleEverywhereSwap","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhereSwap"},{"display_html":"<a href=\"#v:exampleEverywhereDelete\">exampleEverywhereDelete</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleEverywhereDelete","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhereDelete"},{"display_html":"<a href=\"#v:exampleEverywhereEmpty\">exampleEverywhereEmpty</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleEverywhereEmpty","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleEverywhereEmpty"},{"display_html":"<a href=\"#v:exampleThere\">exampleThere</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleThere","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleThere"},{"display_html":"<a href=\"#v:exampleNotThere\">exampleNotThere</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleNotThere","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleNotThere"},{"display_html":"<a href=\"#v:exampleCustom\">exampleCustom</a> :: [(<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-Simple.html#t:KeyValueError\" title=\"Examples.Ltl.Simple\">KeyValueError</a> (), <a href=\"https://hackage.haskell.org/package/-/docs/Data-Map-Strict.html#t:Map\" title=\"Data.Map.Strict\">Map</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>)]","name":"exampleCustom","module":"Examples.Ltl.Simple","link":"Examples-Ltl-Simple.html#v:exampleCustom"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MiniLangValue\">MiniLangValue</a><ul class=\"subs\"><li>= <a href=\"#v:MiniLangInteger\">MiniLangInteger</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li><li>| <a href=\"#v:MiniLangBoolean\">MiniLangBoolean</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li></ul>","name":"MiniLangValue MiniLangBoolean MiniLangInteger","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangValue"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MiniLangError\">MiniLangError</a><ul class=\"subs\"><li>= <a href=\"#v:StackUnderflow\">StackUnderflow</a></li><li>| <a href=\"#v:ExpectedBoolean\">ExpectedBoolean</a></li><li>| <a href=\"#v:ExpectedInteger\">ExpectedInteger</a></li></ul>","name":"MiniLangError ExpectedInteger ExpectedBoolean StackUnderflow","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangError"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadMiniLang\">MonadMiniLang</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:push\">push</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> -&gt; m ()</li><li><a href=\"#v:pop\">pop</a> :: m <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a></li><li><a href=\"#v:echo\">echo</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m ()</li><li><a href=\"#v:if_\">if_</a> :: m a -&gt; m a -&gt; m a</li><li><a href=\"#v:while_\">while_</a> :: m () -&gt; m ()</li></ul>","name":"MonadMiniLang while_ if_ echo pop push","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MonadMiniLang"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MiniLangT\">MiniLangT</a> m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Writer-Lazy.html#t:WriterT\" title=\"Control.Monad.Writer.Lazy\">WriterT</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> [<a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>] m))","name":"MiniLangT","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangT"},{"display_html":"<a href=\"#v:runMiniLangT\">runMiniLangT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Functor.html#t:Functor\" title=\"Data.Functor\">Functor</a> m =&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangT\" title=\"Examples.Ltl.HigherOrder\">MiniLangT</a> m a -&gt; m ((<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), [<a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>])","name":"runMiniLangT","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:runMiniLangT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MonadMiniLangEffect\">MonadMiniLangEffect</a> :: <a href=\"Effect-Internal.html#t:Effect\" title=\"Effect.Internal\">Effect</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Push\">Push</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a> m ()</li><li><a href=\"#v:Pop\">Pop</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a> m <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a></li><li><a href=\"#v:Echo\">Echo</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a> m ()</li><li><a href=\"#v:If_\">If_</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) (a :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m a) -&gt; (m a) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a> m a</li><li><a href=\"#v:While_\">While_</a> :: <span class=\"keyword\">forall</span> (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>). (m ()) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a> m ()</li></ul>","name":"MonadMiniLangEffect While_ If_ Echo Pop Push","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect"},{"display_html":"<a href=\"#v:fibonacciExample\">fibonacciExample</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> m, <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m) =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"fibonacciExample","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:fibonacciExample"},{"display_html":"<a href=\"#v:gcdExample\">gcdExample</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> m, <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m) =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"gcdExample","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:gcdExample"},{"display_html":"<a href=\"#v:popInteger\">popInteger</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> m, <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m) =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"popInteger","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:popInteger"},{"display_html":"<a href=\"#v:pushInteger\">pushInteger</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; m ()","name":"pushInteger","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:pushInteger"},{"display_html":"<a href=\"#v:popBoolean\">popBoolean</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> m, <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m) =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"popBoolean","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:popBoolean"},{"display_html":"<a href=\"#v:pushBoolean\">pushBoolean</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLang\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLang</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; m ()","name":"pushBoolean","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:pushBoolean"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MiniLangMod\">MiniLangMod</a> = <a href=\"#v:MiniLangMod\">MiniLangMod</a> {<ul class=\"subs\"><li><a href=\"#v:onPop\">onPop</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a></li><li><a href=\"#v:onPush\">onPush</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a></li></ul>}","name":"MiniLangMod onPush onPop MiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#t:MiniLangMod"},{"display_html":"<a href=\"#v:popBoolMiniLangMod\">popBoolMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"popBoolMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:popBoolMiniLangMod"},{"display_html":"<a href=\"#v:popIntegerMiniLangMod\">popIntegerMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"popIntegerMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:popIntegerMiniLangMod"},{"display_html":"<a href=\"#v:popMiniLangMod\">popMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"popMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:popMiniLangMod"},{"display_html":"<a href=\"#v:pushBoolMiniLangMod\">pushBoolMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"pushBoolMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:pushBoolMiniLangMod"},{"display_html":"<a href=\"#v:pushIntegerMiniLangMod\">pushIntegerMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"pushIntegerMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:pushIntegerMiniLangMod"},{"display_html":"<a href=\"#v:pushMiniLangMod\">pushMiniLangMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"pushMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:pushMiniLangMod"},{"display_html":"<a href=\"#v:flipBools\">flipBools</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"flipBools","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:flipBools"},{"display_html":"<a href=\"#v:flipIntegers\">flipIntegers</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"flipIntegers","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:flipIntegers"},{"display_html":"<a href=\"#v:flipBoth\">flipBoth</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"flipBoth","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:flipBoth"},{"display_html":"<a href=\"#v:moduloMiniLangMod\">moduloMiniLangMod</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a>","name":"moduloMiniLangMod","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:moduloMiniLangMod"},{"display_html":"<a href=\"#v:interpretAndRunMiniLang\">interpretAndRunMiniLang</a> :: <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a> '[<a href=\"Examples-Ltl-HigherOrder.html#t:MonadMiniLangEffect\" title=\"Examples.Ltl.HigherOrder\">MonadMiniLangEffect</a>, <a href=\"Effect-Error.html#t:MonadErrorEffect\" title=\"Effect.Error\">MonadErrorEffect</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a>] a -&gt; [((<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), [<a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>])]","name":"interpretAndRunMiniLang","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:interpretAndRunMiniLang"},{"display_html":"<a href=\"#v:exampleSomewhere\">exampleSomewhere</a> :: [((<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), [<a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>])]","name":"exampleSomewhere","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:exampleSomewhere"},{"display_html":"<a href=\"#v:exampleIf\">exampleIf</a> :: <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangMod\" title=\"Examples.Ltl.HigherOrder\">MiniLangMod</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; [((<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangError\" title=\"Examples.Ltl.HigherOrder\">MiniLangError</a> (), <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>), [<a href=\"Examples-Ltl-HigherOrder.html#t:MiniLangValue\" title=\"Examples.Ltl.HigherOrder\">MiniLangValue</a>])]","name":"exampleIf","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:exampleIf"},{"display_html":"<a href=\"#v:exampleFlipFibonacci\">exampleFlipFibonacci</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"exampleFlipFibonacci","module":"Examples.Ltl.HigherOrder","link":"Examples-Ltl-HigherOrder.html#v:exampleFlipFibonacci"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AccountsMod\">AccountsMod</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:AccountsMod\">AccountsMod</a> :: (<a href=\"Examples-Account-AbstractDomain.html#t:Payment\" title=\"Examples.Account.AbstractDomain\">Payment</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Examples-Account-AbstractDomain.html#t:Payment\" title=\"Examples.Account.AbstractDomain\">Payment</a>) -&gt; <a href=\"Examples-Account-PaymentMod.html#t:AccountsMod\" title=\"Examples.Account.PaymentMod\">AccountsMod</a></li></ul>","name":"AccountsMod AccountsMod","module":"Examples.Account.PaymentMod","link":"Examples-Account-PaymentMod.html#t:AccountsMod"},{"display_html":"<a href=\"#v:conditionalPaymentMod\">conditionalPaymentMod</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>) -&gt; <a href=\"Examples-Account-PaymentMod.html#t:AccountsMod\" title=\"Examples.Account.PaymentMod\">AccountsMod</a>","name":"conditionalPaymentMod","module":"Examples.Account.PaymentMod","link":"Examples-Account-PaymentMod.html#v:conditionalPaymentMod"},{"display_html":"<a href=\"#v:increaseJudithPaymentsMod\">increaseJudithPaymentsMod</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; <a href=\"Examples-Account-PaymentMod.html#t:AccountsMod\" title=\"Examples.Account.PaymentMod\">AccountsMod</a>","name":"increaseJudithPaymentsMod","module":"Examples.Account.PaymentMod","link":"Examples-Account-PaymentMod.html#v:increaseJudithPaymentsMod"},{"display_html":"<a href=\"#v:negatePaymentsMod\">negatePaymentsMod</a> :: <a href=\"Examples-Account-PaymentMod.html#t:AccountsMod\" title=\"Examples.Account.PaymentMod\">AccountsMod</a>","name":"negatePaymentsMod","module":"Examples.Account.PaymentMod","link":"Examples-Account-PaymentMod.html#v:negatePaymentsMod"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: <a href=\"Logic-Ltl.html#t:LtlAST\" title=\"Logic.Ltl\">LtlAST</a> <a href=\"Examples-Account-PaymentMod.html#t:AccountsMod\" title=\"Examples.Account.PaymentMod\">AccountsMod</a> '[<a href=\"Examples-Account-AbstractDomain.html#t:MonadAccountsEffect\" title=\"Examples.Account.AbstractDomain\">MonadAccountsEffect</a>, <a href=\"Effect-Error.html#t:MonadErrorEffect\" title=\"Effect.Error\">MonadErrorEffect</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a>] a -&gt; [<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> a]","name":"interpretAndRun","module":"Examples.Account.PaymentMod","link":"Examples-Account-PaymentMod.html#v:interpretAndRun"},{"display_html":"<a href=\"#v:policyAlwaysReceives\">policyAlwaysReceives</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>","name":"policyAlwaysReceives","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:policyAlwaysReceives"},{"display_html":"<a href=\"#v:policyNeverNegative\">policyNeverNegative</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>","name":"policyNeverNegative","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:policyNeverNegative"},{"display_html":"<a href=\"#v:policyOtherNeverNegative\">policyOtherNeverNegative</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>","name":"policyOtherNeverNegative","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:policyOtherNeverNegative"},{"display_html":"<a href=\"#v:policyPositivePayments\">policyPositivePayments</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:Policy\" title=\"Examples.Account.AbstractDomain\">Policy</a>","name":"policyPositivePayments","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:policyPositivePayments"},{"display_html":"<a href=\"#v:registerPolicies\">registerPolicies</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; m ()","name":"registerPolicies","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:registerPolicies"},{"display_html":"<a href=\"#v:addAndSubscribe\">addAndSubscribe</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a> -&gt; [<a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>] -&gt; m ()","name":"addAndSubscribe","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:addAndSubscribe"},{"display_html":"<a href=\"#v:registerUsers\">registerUsers</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; m ()","name":"registerUsers","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:registerUsers"},{"display_html":"<a href=\"#v:firstPayments\">firstPayments</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; m ()","name":"firstPayments","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:firstPayments"},{"display_html":"<a href=\"#v:scenario1\">scenario1</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"scenario1","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:scenario1"},{"display_html":"<a href=\"#v:negateScenario1\">negateScenario1</a> :: [<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>]","name":"negateScenario1","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:negateScenario1"},{"display_html":"<a href=\"#v:scenario2\">scenario2</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; m ()","name":"scenario2","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:scenario2"},{"display_html":"<a href=\"#v:negateScenario2\">negateScenario2</a> :: [<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> ()]","name":"negateScenario2","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:negateScenario2"},{"display_html":"<a href=\"#v:increaseJudithPaymentsScenario1\">increaseJudithPaymentsScenario1</a> :: [<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>]","name":"increaseJudithPaymentsScenario1","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:increaseJudithPaymentsScenario1"},{"display_html":"<a href=\"#v:scenario3\">scenario3</a> :: <a href=\"Examples-Account-AbstractDomain.html#t:MonadAccounts\" title=\"Examples.Account.AbstractDomain\">MonadAccounts</a> m =&gt; m ()","name":"scenario3","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:scenario3"},{"display_html":"<a href=\"#v:increaseJudithPaymentsScenario3\">increaseJudithPaymentsScenario3</a> :: [<a href=\"https://hackage.haskell.org/package/-/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Examples-Account-SimpleDomain.html#t:AccountsError\" title=\"Examples.Account.SimpleDomain\">AccountsError</a> ()]","name":"increaseJudithPaymentsScenario3","module":"Examples.Account.Scenarios","link":"Examples-Account-Scenarios.html#v:increaseJudithPaymentsScenario3"}]